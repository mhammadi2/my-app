// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  password           String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relations
  posts              Post[]
  donations          Donation[]
  eventRegistrations EventRegistration[]
  organizedEvents    Event[]             @relation("EventOrganizer")
  
  // Auth relations
  accounts           Account[]
  sessions           Session[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model Event {
  id           String              @id @default(cuid())
  title        String
  description  String              @db.Text
  imageUrl     String?
  location     String
  date         DateTime
  startTime    String              @default("18:00")
  endTime      String              @default("21:00")
  category     String              @default("other")
  capacity     Int                 @default(100)
  status       String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  
  // Relations
  organizerId  String
  organizer    User?                @relation("EventOrganizer", fields: [organizerId], references: [id])
  
  // One-to-many relations
  attendees    EventRegistration[]
  tickets      EventTicket[]
  registrations Registration[]

  @@index([organizerId])
  @@index([category])
  @@index([date])
}

model EventRegistration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  eventId   String
  userId    String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
}

model EventTicket {
  id          String   @id @default(cuid())
  name        String
  price       Float
  available   Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model Donation {
  id        String        @id @default(cuid())
  amount    Float
  paymentId String?
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relations
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Registration {
  id              String   @id @default(cuid())
  name            String
  email           String
  phone           String?
  ticketCount     Int      @default(1)
  amount          Float
  paymentIntentId String   @unique
  status          String   // PENDING, CONFIRMED, FAILED, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  eventId         String
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([email])
  @@index([status])
  @@index([paymentIntentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  ADMIN
  USER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
